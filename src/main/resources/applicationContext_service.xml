<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context" xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd http://www.springframework.org/schema/aop https://www.springframework.org/schema/aop/spring-aop.xsd">


    <!--<import resource="classpath:applicationContext_dao.xml"/>-->

    <!--    设置业务逻辑层的包扫描器，目的是在指定的路径下，使用@Service注解的类，
        spring负责创建对象，并添加依赖
-->
<context:component-scan base-package="com.zcm.service"/>

<!--    事务的添加-->
    <!--设置事务管理器-->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <!--PS:这里DataSource会报红 ，是因为dataSour在 applicationContext_dao.xml 中，可以通过imort标签导入但不这样-->
        <!--因为最后spring所有的配置文件是通过初始化参数注入到spring容器中，所以如果在这个xml文件中有dao包的导入，那么之后注入的时候直接注入service就够了，但一般不这么做-->
        <!--会用通配的方式进行spring配置文件的导入，避免循环导入的操作-->
        <property name="dataSource" ref="dataSource"/>
    </bean>
    <!--添加事务的切面-->
    <tx:advice id="myadvice" transaction-manager="transactionManager">
        <!--设置各种参与事务的方法-->
        <tx:attributes>
            <!--查询-->
            <!--只要包含select字符 都可以设定当前查询方法    read-only 查询特性只读-->
            <tx:method name="*select*" read-only="true"/>
            <tx:method name="*find*" read-only="true"/>
            <tx:method name="*get*" read-only="true"/>
            <tx:method name="*search*" read-only="true"/>

            <!--增加   用事务传播特性propagation   REQUIRED支持实务操作 -->
            <tx:method name="*insert*" propagation="REQUIRED"/>
            <tx:method name="*save*" propagation="REQUIRED"/>
            <tx:method name="*add*" propagation="REQUIRED"/>
            <!--删除-->
            <tx:method name="*delete*" propagation="REQUIRED"/>
            <tx:method name="*remove*" propagation="REQUIRED"/>
            <tx:method name="*clear*" propagation="REQUIRED"/>
            <!--修改-->
            <tx:method name="*update*" propagation="REQUIRED"/>
            <tx:method name="*modify*" propagation="REQUIRED"/>
            <tx:method name="*change*" propagation="REQUIRED"/>
            <tx:method name="*set*" propagation="REQUIRED"/>
<!--            会先匹配上面列出的方法，以上若不匹配，就会执行剩下的匹配度-->
            <!--不是让他添加事务（指REQUIRED），而是要支持事务（SUPPORTS）-->
            <tx:method name="*" propagation="SUPPORTS"/>
        </tx:attributes>
    </tx:advice>
    
    <!--完成切面与切入点的织入-->
    <aop:config>
        <aop:pointcut id="mypoint" expression="execution(* com.zcm.service.*.*(..))"/>
        <!--事务绑定-->
        <aop:advisor advice-ref="myadvice"pointcut-ref="mypoint"/>
    </aop:config>
</beans>